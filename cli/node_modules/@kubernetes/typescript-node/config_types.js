"use strict";
exports.__esModule = true;
var u = require("underscore");
function newClusters(a) {
    return u.map(a, clusterIterator());
}
exports.newClusters = newClusters;
function clusterIterator() {
    return function (elt, i, list) {
        if (!elt['name']) {
            throw new Error("clusters" + i + ".name is missing");
        }
        if (!elt.cluster['certificate-authority-data'] && !elt.cluster['certificate-authority']) {
            throw new Error("clusters[" + i + "].cluster.[certificate-authority-data, certificate-authority] is missing");
        }
        if (!elt.cluster['server']) {
            throw new Error("clusters[" + i + "].cluster.server is missing");
        }
        return {
            name: elt['name'],
            caData: elt.cluster['certificate-authority-data'],
            caFile: elt.cluster['certificate-authority'],
            server: elt.cluster['server']
        };
    };
}
function newUsers(a) {
    return u.map(a, userIterator());
}
exports.newUsers = newUsers;
function userIterator() {
    return function (elt, i, list) {
        if (!elt.name) {
            throw new Error("users[" + i + "].name is missing");
        }
        var token = null;
        if (elt.user["auth-provider"]) {
            if (elt.user["auth-provider"]["name"] == "gcp") {
                token = elt.user["auth-provider"]["config"]["access-token"];
            }
            else {
                throw new Error("users[" + i + "].user.auth-provider is unknown");
            }
        }
        return {
            name: elt.name,
            certData: elt.user["client-certificate-data"],
            certFile: elt.user["client-certificate"],
            keyData: elt.user["client-key-data"],
            keyFile: elt.user["client-key"],
            token: token
        };
    };
}
function newContexts(a) {
    return u.map(a, contextIterator());
}
exports.newContexts = newContexts;
function contextIterator() {
    return function (elt, i, list) {
        if (!elt.name) {
            throw new Error("contexts[" + i + "].name is missing");
        }
        if (!elt.context["cluster"]) {
            throw new Error("contexts[" + i + "].context.cluster is missing");
        }
        if (!elt.context["user"]) {
            throw new Error("context[" + i + "].context.user is missing");
        }
        return {
            cluster: elt.context['cluster'],
            user: elt.context["user"],
            name: elt.name
        };
    };
}
